C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN .\output\function.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE source\function.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\function.lst)
                    - OBJECT(.\output\function.obj)

line level    source

   1          #include <CS1521.H>
   2          #include "function.h" 
   3          #include "adc.h"
   4          #include "cacul.h"
   5          #include "flash.h"
   6          #include "uart.h"
   7          #include "timer.h" 
   8          #include "config.h"
   9          #include "string.h"
  10          
  11          uchar lock_b;
  12          float data K;
  13          int16 Badd;
  14          uchar first_time;//是否第一次运行
  15          uchar first_correct;//是否第一次运行
  16          uchar flag_uart;
  17          uint16 flag_mode;
  18          uint16 rx_buff_cnt;
  19          uint16 VPP2_Last;
  20          Package ReceiveData;
  21          
  22          
  23          void work_mode(void)
  24          {
  25   1      #if CORRECT_MODE
                      signed int data vpp2;
              #endif  
  28   1              uchar i;
  29   1              uint16 tmp[10];
  30   1              static unsigned int tmp_sum_last[5]={0xffff,0xffff,0xffff,0xffff,0xffff};
  31   1              uint16 tmp_sum;
  32   1              signed int data vpp1,vpp_PWM;
  33   1      
  34   1      //      uchar table[5];  
  35   1      //      char ntab[17] = "0123456789ABCDEF";
  36   1      
  37   1              for(i=0;i<10;i++)
  38   1              {
  39   2                      if(flag_uart == 1)
  40   2                      {
  41   3                                      return;
  42   3                      }
  43   2      
  44   2                      tmp[i]=Temp_ADC();
  45   2      
  46   2              }
  47   1      
  48   1              Insert_Sort (tmp,10);
  49   1              tmp_sum=(unsigned int)((tmp[4]+tmp[5]+tmp[6]+tmp[7])>>2);
  50   1              if(tmp_sum_last[0]!=0xffff)
  51   1              {
  52   2                      tmp_sum=(tmp_sum+tmp_sum_last[0]+tmp_sum_last[1]+tmp_sum_last[2]+tmp_sum_last[3])/5;
  53   2              }
  54   1              if((tmp_sum<TMP_AD_40L )&&(tmp_sum>TMP_AD_85H))
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 2   

  55   1              {
  56   2                      tmp_sum_last[0]=tmp_sum_last[1];
  57   2                      tmp_sum_last[1]=tmp_sum_last[2];
  58   2                      tmp_sum_last[2]=tmp_sum_last[3];
  59   2                      tmp_sum_last[3]=tmp_sum;
  60   2              }
  61   1              else
  62   1              {
  63   2                      tmp_sum_last[0]=0xffff;
  64   2              }       
  65   1              if((tmp_sum<TMP_AD_L)&&(tmp_sum>TMP_AD_H ))
  66   1              {
  67   2                      vpp1=Flash_Read_Int(WORK_STAR_BASE+(tmp_sum-TMP_AD_H)*2);
  68   2              
  69   2              
  70   2      #if CORRECT_MODE
                              vpp2=Flash_Read_Int(Correct_Addr+(tmp_sum-TMP_AD_H)*2);
                              if(((vpp2-VPP2_Last)>5)||((vpp2-VPP2_Last)<-5))
                              {
                                      vpp2=VPP2_Last;
                              }
                              
                      UART_printf("  Vpp2: ");
                      printn(vpp2,10);
                              vpp1=vpp1+vpp2-1024;
                              VPP2_Last=vpp2;
              #endif                  
  82   2               vpp_PWM=(int)(K*vpp1)+Badd;    
  83   2               
  84   2              }
  85   1      
  86   1      /*  
  87   1              UART_printf("  Temprature: ");
  88   1              printn(tmp_sum,10);
  89   1      
  90   1              UART_printf("  Vpp: ");
  91   1              printn(vpp1,10);
  92   1      
  93   1              UART_printf("  vpp_PWM: ");
  94   1              printn(vpp_PWM,10);
  95   1              UART_printf("  \n"); 
  96   1      
  97   1              UART_printf("  Tmp: ");
  98   1              printn(tmp_sum,10);
  99   1              UART_printf("  Vpp: ");
 100   1              printn(vpp_PWM,10);
 101   1              UART_printf("  \n");
 102   1      */
 103   1              if(vpp_PWM<2)vpp_PWM=2;
 104   1              else if(vpp_PWM>4095)vpp_PWM=4095;
 105   1              DAC_Output(vpp_PWM);    
 106   1              delay_ms(200);
 107   1       /*       
 108   1              vpp1 = Vcp_Collect();
 109   1              UART_printf("  vcp: ");
 110   1              printn(vpp1,10);
 111   1              UART_printf("  \n");
 112   1      */      
 113   1              
 114   1      
 115   1              
 116   1      /*
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 3   

 117   1                      table[0]=ntab[tmp_sum/1000];
 118   1                      table[1]=ntab[tmp_sum%1000/100];
 119   1                      table[2]=ntab[tmp_sum%100/10];
 120   1                      table[3]=ntab[tmp_sum%10];
 121   1                      UART_printf("temperature= ");
 122   1                      Uart_Send(table,4);
 123   1      
 124   1                      table[0]=ntab[vpp/1000];
 125   1                      table[1]=ntab[vpp%1000/100];
 126   1                      table[2]=ntab[vpp%100/10];
 127   1                      table[3]=ntab[vpp%10];
 128   1                      UART_printf(" ,  Flash= ");
 129   1                      Uart_Send(table,4);
 130   1                      
 131   1                  for(i=0;i<10;i++)
 132   1                      {
 133   1                              vcp[i]=Vcp_Collect();
 134   1                              delay_ms(10);
 135   1                      }
 136   1                      Insert_Sort(vcp,10);
 137   1      #if TEN_BIT
 138   1                      vcp_sum=(vcp[3]+vcp[4]+vcp[5]+vcp[6])/8;
 139   1      #else
 140   1              vcp_sum=(vcp[3]+vcp[4]+vcp[5]+vcp[6])/2;
 141   1      #endif
 142   1                      table[0]=ntab[vcp_sum/1000];
 143   1                      table[1]=ntab[vcp_sum%1000/100];
 144   1                      table[2]=ntab[vcp_sum%100/10];
 145   1                      table[3]=ntab[vcp_sum%10];
 146   1                      UART_printf(" ,  VCP= ");
 147   1                      Uart_Send(table,4);
 148   1                      UART_printf("\n");
 149   1      */
 150   1      }
 151          
 152          /***************************************
 153          输入：无
 154          输出：采集后的10位温度
 155          功能：采集来自晶体的温度对应的电压值,得到数字量
 156          ****************************************/
 157          void vpull_mode2(void) 
 158          {
 159   1      #if CORRECT_MODE
                      signed int data vpp2;
              #endif
 162   1              uchar i;
 163   1          unsigned int vpull1[66]=0;
 164   1              uint16 tmp[10];
 165   1              static unsigned int tmp_sum_last[5]={0xffff,0xffff,0xffff,0xffff,0xffff};
 166   1              int16 tmp_sum;
 167   1              long vpull_sum;
 168   1              signed int data vpp1,vpp_PWM,vpull;
 169   1      
 170   1      //      uchar table[5];  
 171   1      //      char ntab[17] = "0123456789ABCDEF";
 172   1      
 173   1              for(i=0;i<8;i++)
 174   1              {
 175   2                      if(flag_uart == 1)
 176   2                      {
 177   3                              return;
 178   3                      }
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 4   

 179   2                      tmp[i]=Temp_ADC();
 180   2              }
 181   1      
 182   1              Insert_Sort (tmp,8);
 183   1              tmp_sum=((tmp[2]+tmp[3]+tmp[4]+tmp[5])>>2);
 184   1              if(tmp_sum>4095)
 185   1              {
 186   2                      tmp_sum=4095;
 187   2              }
 188   1              if(tmp_sum<=0)
 189   1              {
 190   2                      tmp_sum=0;
 191   2              }
 192   1      
 193   1      
 194   1        
 195   1              for(i=0;i<32;i++)
 196   1              {
 197   2                      if(flag_uart == 1)
 198   2                      {
 199   3                              return;
 200   3                      }
 201   2      
 202   2                      vpull1[i]=Vpull_Collect();
 203   2      
 204   2              }
 205   1              Insert_Sort (vpull1,32); 
 206   1              vpull_sum=0;    
 207   1              for(i=16;i<20;i++)//首尾两个数据不舍弃，否则拉偏反应慢
 208   1              { 
 209   2                  vpull_sum=vpull_sum+vpull1[i];
 210   2              }
 211   1              vpull_sum = vpull_sum/4;        
 212   1              if(vpull_sum>4095)
 213   1              {
 214   2                      vpull_sum=4095;
 215   2              }
 216   1      
 217   1              vpull=(signed int)vpull_sum-2048;
 218   1      
 219   1              if(tmp_sum_last[0]!=0xffff)
 220   1              {
 221   2                      tmp_sum=(tmp_sum+tmp_sum_last[0]+tmp_sum_last[1]+tmp_sum_last[2]+tmp_sum_last[3])/5;
 222   2              }
 223   1              // 平滑温度补偿值
 224   1              // 极度温度下不平滑温度
 225   1              if((tmp_sum<TMP_AD_40L )&&(tmp_sum>TMP_AD_85H))
 226   1              {
 227   2                      tmp_sum_last[0]=tmp_sum_last[1];
 228   2                      tmp_sum_last[1]=tmp_sum_last[2];
 229   2                      tmp_sum_last[2]=tmp_sum_last[3];
 230   2                      tmp_sum_last[3]=tmp_sum;
 231   2              }
 232   1              else
 233   1              {
 234   2                      tmp_sum_last[0]=0xffff;
 235   2              }
 236   1      
 237   1              
 238   1          if((tmp_sum<TMP_AD_L)&&(tmp_sum>TMP_AD_H ))
 239   1          {
 240   2                  vpp1=Flash_Read_Int(WORK_STAR_BASE+(tmp_sum-TMP_AD_H)*2);
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 5   

 241   2      #if CORRECT_MODE
                              vpp2=Flash_Read_Int(Correct_Addr+(tmp_sum-TMP_AD_H)*2);
                              if(((vpp2-VPP2_Last)>5)||((vpp2-VPP2_Last)<-5))
                              {
                                      vpp2=VPP2_Last;
                              }
                              
                              vpp1=vpp1+vpp2-1024;
                              VPP2_Last=vpp2;
              #endif
 251   2              }  
 252   1              vpp_PWM=vpp1+vpull;
 253   1              
 254   1              vpp_PWM=(int)(K*vpp_PWM)+Badd;
 255   1      
 256   1              if(vpp_PWM<2)vpp_PWM=2;
 257   1              else if(vpp_PWM>4095)vpp_PWM=4095;
 258   1              DAC_Output(vpp_PWM);
 259   1              delay_ms(500); 
 260   1      
 261   1      }
 262          /*****************读CP电压*************************/
 263          static void ReadCp(void)
 264          {
 265   1              int16 tmp_sum,vcp_sum;
 266   1          lock_b = 1;   
 267   1      
 268   1          tmp_sum=Temp_Collect();     
 269   1              vcp_sum=Vcp_Collect();     
 270   1          ReceiveData.Data[0] = tmp_sum>>8;
 271   1          ReceiveData.Data[1] = tmp_sum;
 272   1          ReceiveData.Data[2] = vcp_sum>>8;
 273   1          ReceiveData.Data[3] = vcp_sum;    
 274   1      }
 275          /*****************写FLASH压控曲线*******************/
 276          static void WriteFlash(void)
 277          {   
 278   1          uchar Fream_cnt;
 279   1          uchar  flash_CP;
 280   1          uint16 i;
 281   1          Fream_cnt = ReceiveData.Frame;
 282   1                
 283   1          for(i = 0 ; i < 256 ; i++)
 284   1          {
 285   2              flash_CP = ReceiveData.Data[i];        
 286   2              Flash_Write(WORK_STAR_BASE + i+(Fream_cnt*256),flash_CP);       
 287   2          }
 288   1      /*               
 289   1               for(i = 0 ; i < 2048 ; i++)
 290   1          {   
 291   1                  flash_CP=flash_CP;      
 292   1              Flash_Write(WORK_STAR_BASE + i*2,0x08);
 293   1                      Flash_Write(WORK_STAR_BASE + i*2+1,0x98);               
 294   1          }
 295   1              Flash_Erase(FLAG_ADDR);
 296   1              delay_ms(10);           
 297   1              Flash_Write(FLAG_ADDR,0x00);
 298   1              flag_mode=0;
 299   1       */             
 300   1      }
 301          /*****************读压控曲线*******************/
 302          static void ReadFlash(void)
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 6   

 303          {      
 304   1      //    uchar k;
 305   1          uint16 i;    
 306   1          uchar  flash_CP,Fream_cnt;
 307   1          
 308   1              Fream_cnt = ReceiveData.Frame;
 309   1          for(i = 0 ; i < 256 ; i++ )
 310   1          {                                                    
 311   2              flash_CP=Flash_Read(WORK_STAR_BASE+(Fream_cnt*256)+i);                  
 312   2              ReceiveData.Data[i] = flash_CP;                                                
 313   2          }
 314   1      //      ReceiveData.Null = k;          
 315   1          ReceiveData.Error = 0;
 316   1          Uart_Send((unsigned char *)(&ReceiveData),RX_BUFF_LEN);              
 317   1      }               
 318          /********读模式--0工作模式，非0锁相模式********/
 319          static void ReadMode(void)
 320          {
 321   1          
 322   1          ReceiveData.Data[1] = 0xff;
 323   1              ReceiveData.Data[2] = Flash_Read(FLAG_ADDR);            
 324   1      }
 325          /*****************读产品     *******************/
 326          static void ReadPr(void)
 327          {   
 328   1              uchar i; 
 329   1          for(i = 0 ; i < 7; i++ )
 330   1          {
 331   2              ReceiveData.Data[i] =   Flash_Read(PR_ADDR+i);
 332   2          }
 333   1      }
 334          /*****************读SN     *******************/
 335          static void ReadSn(void)
 336          {    
 337   1              uchar i;
 338   1          for(i=0;i<12;i++)
 339   1          {
 340   2              ReceiveData.Data[i]= Flash_Read(SN_ADDR+i);         
 341   2          }
 342   1      }               
 343          /*****************写SN*******************/
 344          static void WriteSn(void)
 345          {
 346   1              uchar i;
 347   1          Flash_Erase(SN_ADDR);
 348   1          for(i = 0 ; i < 12 ; i++)
 349   1          {         
 350   2              Flash_Write(SN_ADDR + i,ReceiveData.Data[i]);        
 351   2          }
 352   1      }
 353          /*****************读软件版本     *******************/
 354          static void ReadVr(void)
 355          {
 356   1              uchar i;
 357   1          for(i = 0 ; i < 7; i++ )
 358   1          {
 359   2              ReceiveData.Data[i] = Flash_Read(VR_ADDR+i);
 360   2          }
 361   1      }
 362          /***************************************
 363          输入：无
 364          输出：无
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 7   

 365          功能：解析串口读出的数据并返回数据
 366          ****************************************/
 367          void uart_op(void)
 368          {
 369   1              uchar tx_flag;  
 370   1              if(flag_uart==1)
 371   1              {
 372   2              switch (ReceiveData.Commond){
 373   3                  case READ_CP:
 374   3                      ReadCp();
 375   3                      tx_flag=1;
 376   3                      break;
 377   3                  case WRITE_FLASH:
 378   3                      WriteFlash();
 379   3                      tx_flag=1;
 380   3                      break;
 381   3                  case READ_FLASH:
 382   3                      ReadFlash();
 383   3                      break;
 384   3                  case ERASE_FLASH:
 385   3                      erase_flash();
 386   3                      tx_flag=1;
 387   3                      break;
 388   3                  case WRITE_MODE:
 389   3                      write_flag();
 390   3                      tx_flag=1;
 391   3                      break;
 392   3                  case READ_MODE:
 393   3                      ReadMode();
 394   3                      tx_flag=1;
 395   3                      break;
 396   3                  case READ_PR:
 397   3                      ReadPr();
 398   3                      tx_flag=1;
 399   3                      break;
 400   3                  case READ_VR:
 401   3                      ReadVr();
 402   3                      tx_flag=1;
 403   3                      break;
 404   3                  case READ_SN:
 405   3                      ReadSn();
 406   3                      tx_flag=1;                
 407   3                      break;
 408   3                  case WRITE_SN:
 409   3                      WriteSn();
 410   3                      tx_flag=1;
 411   3                      break;
 412   3                  default :
 413   3                      tx_flag=2;
 414   3                      break;   
 415   3              }
 416   2      /*****************发送数据*******************/
 417   2              if(tx_flag==1)
 418   2              {
 419   3                  tx_flag=0;
 420   3                              ReceiveData.Error = 0;
 421   3                      Uart_Send((unsigned char *)(&ReceiveData),RX_BUFF_LEN);
 422   3      
 423   3              }
 424   2              else if(tx_flag==2)
 425   2              {
 426   3                  tx_flag=0;
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 8   

 427   3                  ReceiveData.Head = 0x7E;
 428   3                  ReceiveData.Tail = 0xAA;
 429   3                  ReceiveData.Error = 1;
 430   3                  Uart_Send((unsigned char *)(&ReceiveData),RX_BUFF_LEN);
 431   3              }
 432   2               
 433   2                              
 434   2              }
 435   1              flag_uart=0;
 436   1              memset((unsigned char *)(&ReceiveData),0x00,RX_BUFF_LEN);
 437   1      }
 438          
 439          
 440          /***************************************
 441          输入：无
 442          输出：无
 443          功能：擦除拟合数据区间的数据
 444          擦除16行的数据4*1024=4096个地址。
 445          ****************************************/
 446           void  erase_flash(void)
 447          {
 448   1                      uchar i;
 449   1                      EAL = 0;
 450   1                      for(i=0;i<8;i++)
 451   1                      {                       
 452   2                              Flash_Erase(WORK_STAR_BASE+i*1024);
 453   2                              delay_ms(1);                            
 454   2                      }
 455   1      
 456   1                      Flash_Erase(FLAG_ADDR);
 457   1                      delay_ms(1);
 458   1                      EAL = 1;
 459   1                      ReceiveData.Error = 0;    //成功标志
 460   1                      
 461   1      }
 462          /***************************************
 463          输入：无
 464          输出：无
 465          功能：通过擦写FLASH设置工作模式
 466          ****************************************/
 467          static void write_flag(void)
 468          {
 469   1              if(ReceiveData.Data[2]==0x00)  //工作模式
 470   1              {
 471   2                      Flash_Erase(FLAG_ADDR);
 472   2                      delay_ms(10);           
 473   2                      Flash_Write(FLAG_ADDR,0x00);
 474   2                      ReceiveData.Error=0;
 475   2                      flag_mode=0;
 476   2              }
 477   1              else if(ReceiveData.Data[2]==0xFF)  //锁相模式
 478   1              {
 479   2                      Flash_Erase(FLAG_ADDR);
 480   2                      delay_ms(10);
 481   2                      Flash_Write(FLAG_ADDR,0xFF);            
 482   2                      ReceiveData.Error=0;
 483   2                      flag_mode=0xff;
 484   2              }
 485   1              else if (ReceiveData.Data[2]==0x01)  //拉偏模式
 486   1              {
 487   2                      Flash_Erase(FLAG_ADDR);
 488   2                      delay_ms(10);
C51 COMPILER V9.00   FUNCTION                                                              03/09/2017 13:35:18 PAGE 9   

 489   2                      Flash_Write(FLAG_ADDR,0x01);                            
 490   2                      ReceiveData.Error=0;
 491   2                      flag_mode=1;
 492   2              }
 493   1              else
 494   1              {
 495   2                      ReceiveData.Error=1;
 496   2              }
 497   1      }
 498          void write_info(void)
 499          {        
 500   1              uchar PR[7] = "CS1521X";
 501   1              uchar VR[7] = "Z.00.04";
 502   1              uchar i;
 503   1      
 504   1          Flash_Erase(PR_ADDR);
 505   1              Flash_Erase(VR_ADDR);
 506   1              for(i=0;i<7;i++)
 507   1              {
 508   2                      Flash_Write(PR_ADDR+i,PR[i]);
 509   2                      Flash_Write(VR_ADDR+i,VR[i]);                   
 510   2              }
 511   1      
 512   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1856    ----
   CONSTANT SIZE    =    146    ----
   XDATA SIZE       =    282     136
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      89
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
