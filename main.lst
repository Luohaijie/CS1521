C51 COMPILER V9.00   MAIN                                                                  03/09/2017 13:35:19 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE source\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) OBJECT(
                    -.\output\main.obj)

line level    source

   1          #include <CS1521.H>
   2          #include "stdio.h"
   3          #include "string.h"     
   4          #include "adc.h"
   5          #include "flash.h"
   6          #include "timer.h"
   7          #include "uart.h"
   8          #include "function.h"
   9          #include "cacul.h"
  10          #include "config.h"     
  11           
  12          void Correct_Mode(void);
  13          
  14          void UART0(void) interrupt K_UART1
  15          {
  16   1              if((S1CON&0x01)==0x01){                         
  17   2                      S1CON &= 0xfe;
  18   2                      if (rx_buff_cnt < RX_BUFF_LEN)
  19   2                      {
  20   3                              *((unsigned char *)(&ReceiveData)+rx_buff_cnt) = S1BUF;
  21   3                               
  22   3                              if(ReceiveData.Head == 0x7E)
  23   3                              {
  24   4                                      if(rx_buff_cnt == RX_BUFF_LEN-1)  //计数满一个定长
  25   4                                      {
  26   5                                              if(ReceiveData.Tail==0xAA)
  27   5                                              {
  28   6                                                      flag_uart=1;
  29   6                                                      rx_buff_cnt=0;
  30   6                                              }
  31   5                                      }
  32   4                                      else
  33   4                                      {
  34   5                                              rx_buff_cnt++;
  35   5                                      }
  36   4                              }
  37   3                              else
  38   3                              {
  39   4                                      rx_buff_cnt=0;
  40   4                              }               
  41   3                         
  42   3                      }                
  43   2               }
  44   1      
  45   1      }
  46          
  47          int main()
  48          {        
  49   1      #if  LOCK_SELF
  50   1              uint16 tmp_sum,vcp_sum,correct_f3;
  51   1      #endif
  52   1      //      uint16 vpp;     
  53   1      //      uchar table[5];  
  54   1      //      char ntab[17] = "0123456789ABCDEF";
C51 COMPILER V9.00   MAIN                                                                  03/09/2017 13:35:19 PAGE 2   

  55   1      //      uint16 tmp_sum;
  56   1      
  57   1          Time_Init();
  58   1              delay_ms(1000);
  59   1          Power_Init();
  60   1          Port_Init();
  61   1              Sin_Select(CMOS);
  62   1              Uart_Init();
  63   1      
  64   1              flag_mode = Flash_Read(FLAG_ADDR);
  65   1              
  66   1              write_info();
  67   1              Iterrup_Init(); 
  68   1      //      correct_f1 = Flash_Read(Correct_Addr+610-TMP_AD_H);
  69   1      //      correct_f2 = Flash_Read(Correct_Addr+580-TMP_AD_H);
  70   1      
  71   1      //      if(flag_mode!=0xff)
  72   1              {
  73   2              delay_ms(2000);
  74   2              Calc_K_B();
  75   2      //      delay_ms(1000);
  76   2              tmp_sum=Temp_Collect();
  77   2              VPP2_Last=Flash_Read_Int(Correct_Addr+(tmp_sum-TMP_AD_H)*2);
  78   2              
  79   2              }
  80   1      
  81   1              first_correct = 0;
  82   1              rx_buff_cnt= 0;
  83   1              flag_uart=0;
  84   1              lock_b=0;
  85   1      //      tmp_sum = TMP_AD_H;
  86   1              DAC_Output(2000);       
  87   1              while(1)
  88   1              {
  89   2                      
  90   2      //              USART_SendData(0x55);
  91   2      /*              tmp_sum = Temp_Collect();
  92   2                      UART_printf("  Temp_ADC: ");
  93   2                      printn(tmp_sum,10);
  94   2                      UART_printf("  \n"); 
  95   2       */
  96   2                      if(flag_uart == 1)
  97   2                      {
  98   3                              uart_op();                      
  99   3                      }
 100   2      
 101   2      
 102   2                      if((flag_mode == 0))
 103   2                      {
 104   3      #if CORRECT_MODE                        
                                      Correct_Mode(); 
              #endif                                          
 107   3                              work_mode();
 108   3                      }
 109   2      
 110   2                      else if((flag_mode == 1))
 111   2                      {
 112   3      #if CORRECT_MODE
                                      Correct_Mode(); 
              #endif          
 115   3                              vpull_mode2();
 116   3                      }
C51 COMPILER V9.00   MAIN                                                                  03/09/2017 13:35:19 PAGE 3   

 117   2      #if LOCK_SELF           
 118   2                      if(flag_mode == 0xff)
 119   2                      {
 120   3                              //correct_f3=Flash_Read(FLAG_ADDR+1);
 121   3                              tmp_sum=0;
 122   3                              vcp_sum=0;
 123   3                              tmp_sum=Temp_Collect();
 124   3                              vcp_sum=Vcp_Collect();          
 125   3                              if((vcp_sum<4000)&&(vcp_sum>200)&&(lock_b==1))
 126   3                              {
 127   4                                      correct_f3=Flash_Read_Int(WORK_STAR_BASE+(tmp_sum-TMP_AD_H)*2);
 128   4                                      if(correct_f3==0xffff)
 129   4                                      {
 130   5                                              Flash_Write(WORK_STAR_BASE + (tmp_sum-TMP_AD_H)*2,vcp_sum>>8);
 131   5                                              Flash_Write(WORK_STAR_BASE + (tmp_sum-TMP_AD_H)*2+1,vcp_sum&0xff);
 132   5                                      }
 133   4                              }
 134   3       
 135   3                      }
 136   2      #endif
 137   2                              
 138   2              }
 139   1                              
 140   1      }
 141          
 142          #if CORRECT_MODE
              void Correct_Mode(void)
              {
                      uchar i;
                      uint16 tmp[10];
              //      unsigned int table[5];
                      uint16 tmp_sum=0,vcp_sum=0,correct_f3,vpp;
                      signed int data vpp_PWM,diff_last=0,tmp_last=0,diff=0,correct_y,correct_x;
                      
                      
                      for(i=0;i<10;i++)
                              {
                                      if(flag_uart == 1)
                                      {
                                              uart_op();
                                      }
              
                                      tmp[i]=Temp_Collect();                  
                              }
              
                              Insert_Sort (tmp,10);
                              tmp_sum=(unsigned int)((tmp[4]+tmp[5]+tmp[6]+tmp[7])>>2);
              
                      correct_f3=Flash_Read_Int(Correct_Addr+(tmp_sum-TMP_AD_H)*2);
              #if CORRECT_DEBUG
                                              UART_printf("  correct_f3: ");
                                              printn(correct_f3,10);
              #endif
              
                          if(correct_f3==0xffff)
                      {
                              correct_f3=0;
                      if((tmp_sum<TMP_AD_L)&&(tmp_sum>TMP_AD_H ))
                      {
                              vpp=Flash_Read_Int(WORK_STAR_BASE+(tmp_sum-TMP_AD_H)*2);
              
                                      while((signed int)(vpp-vcp_sum)>0)  
C51 COMPILER V9.00   MAIN                                                                  03/09/2017 13:35:19 PAGE 4   

                                      {      
                                              vpp_PWM=(int)((vpp+diff)*K)+Badd;
                                              DAC_Output(vpp_PWM);            
              
                                  delay_ms(300);
                      
                                  for(i=0;i<10;i++)
                                              {
                                                      tmp[i]=Vcp_Collect();
                                                      delay_ms(10);
                                              }
                                              Insert_Sort(tmp,10);
              
                                      vcp_sum=(tmp[3]+tmp[4]+tmp[5]+tmp[6])/4;                        
              
                                              diff =diff+vpp-vcp_sum+1;
                                                                              
                                       }      
                                             
                                      diff =diff+1024;
                                      if(first_correct==0)
                                      {
                                              first_correct = 1;
                                                      VPP2_Last = diff;
                                      }
                                      else //(first_correct==1)
                                      {
                      
                                              correct_y=diff-diff_last;
                                              correct_x=tmp_sum-tmp_last;
                      
                                              if(((correct_y<-20)||(correct_y>20))&&((correct_x>-3)&&(correct_x<3)))
                                              {
                                                      diff=diff_last;
                      
                                              }
              #if CORRECT_DEBUG
                                              UART_printf("  diff: ");
                                              printn(diff,10);
                                              UART_printf("  \n"); 
              #endif
                                      Flash_Write(Correct_Addr+(tmp_sum-TMP_AD_H)*2,diff>>8);
                                              Flash_Write(Correct_Addr+(tmp_sum-TMP_AD_H)*2+1,diff&0xff);
                              
                                      }
                                      
                                      diff_last=diff;
                                      tmp_last = tmp_sum;
                      
                          }
                      }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   MAIN                                                                  03/09/2017 13:35:19 PAGE 5   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
